---
name: ci
on:
  pull_request:
  push:
    branches:
      - 'release/**'
jobs:
  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v1
      - name: Install yamllint
        run: pip install --user yamllint
      - name: Run yamllint
        run: ~/.local/bin/yamllint -c .yamllint.yml --strict .
  shellcheck:
    name: shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: shellcheck
        uses: fkautz/shell-linter@v1.0.1
  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.35
  excludeFmtErrorf:
    name: exclude fmt.Errorf
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Exclude fmt.Errorf
        run: |
          if grep -r --include=*.go --exclude=*.pb.go fmt.Errorf . ; then
           echo "Please use errors.Errorf (or errors.New or errors.Wrap or errors.Wrapf) as appropriate rather than fmt.Errorf"
           exit 1
          fi
  checkgomod:
    name: check go.mod and go.sum
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - run: go mod tidy
      - name: Check for changes in go.mod or go.sum
        run: |
          git diff --name-only --exit-code go.mod || ( echo "Run go tidy" && false )
          git diff --name-only --exit-code go.sum || ( echo "Run go tidy" && false )
  kind:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - v1.23.0
          - v1.22.1
          - v1.21.1
          - v1.20.7
          - v1.19.11
          - v1.18.15
          - v1.17.11
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
          github-token: ${{ github.token }}
      - name: Set go env
        run: |
          echo GOPATH=$GITHUB_WORKSPACE >> $GITHUB_ENV
          echo GO111MODULE=on >> $GITHUB_ENV
          echo $GITHUB_WORKSPACE/bin >> $GITHUB_PATH
      - uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/src/github.com/${{ github.repository }}
      - uses: engineerd/setup-kind@v0.5.0
        with:
          config: src/github.com/${{ github.repository }}/${{matrix.image <= 'v1.19.11' && 'cluster-config-old.yaml' || 'cluster-config.yaml'}}
          version: v0.11.1
          image: kindest/node:${{ matrix.image }}
      - name: Check kind cluster
        run: |
          kubectl version
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
        working-directory: ${{ github.workspace }}/src/github.com/${{ github.repository }}
      - name: Integration tests
        run: |
          go test -count 1 -timeout 1h -race -v -tags=single ./...
        env:
          ARTIFACTS_DIR: ${{ matrix.image }}-logs/${{ matrix.image }}
        working-directory: ${{ github.workspace }}/src/github.com/${{ github.repository }}
      - name: Upload artifacts
        if: ${{ success() || failure() || cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: Containers logs
          path: ${{ github.workspace }}/src/github.com/${{ github.repository }}/${{ matrix.image }}-logs
  interdomain-kind:
    runs-on: ubuntu-latest
    env:
      KUBERNETES_VERSION: ${{ secrets.NSM_KUBERNETES_VERSION }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
          github-token: ${{ github.token }}
      - name: Set go env
        run: |
          echo GOPATH=$GITHUB_WORKSPACE >> $GITHUB_ENV
          echo GO111MODULE=on >> $GITHUB_ENV
          echo $GITHUB_WORKSPACE/bin >> $GITHUB_PATH
      - uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/src/github.com/${{ github.repository }}
      - name: Get kind
        run: go get sigs.k8s.io/kind@v0.11.1
      - name: Create kind clusters
        env:
          CONFIG: 'cluster-config-interdomain.yaml'
          TIMEOUT: 200s
          CLUSTER_NAME_1: interdomain-kind-1
          CLUSTER_NAME_2: interdomain-kind-2
          CLUSTER_NAME_3: interdomain-kind-3
          KUBE_CONFIG_PATH_PREFIX: ${{ github.workspace }}/src/github.com/${{ github.repository }}
        run: |
          IMAGE="kindest/node:$KUBERNETES_VERSION"
          if [[ $KUBERNETES_VERSION=="" ]]; then
              IMAGE="kindest/node:v1.22.1"
          fi

          echo "creating kind clusters"
          kind create cluster --name $CLUSTER_NAME_1 --config $CONFIG --wait $TIMEOUT --image="$IMAGE"
          kind create cluster --name $CLUSTER_NAME_2 --config $CONFIG --wait $TIMEOUT --image="$IMAGE"
          kind create cluster --name $CLUSTER_NAME_3 --config $CONFIG --wait $TIMEOUT --image="$IMAGE"
          kind get clusters

          kind get kubeconfig --name "$CLUSTER_NAME_1" > $KUBE_CONFIG_PATH_PREFIX/config1
          echo "config 1:"
          cat $KUBE_CONFIG_PATH_PREFIX/config1

          kind get kubeconfig --name "$CLUSTER_NAME_2" > $KUBE_CONFIG_PATH_PREFIX/config2
          echo "config 2:"
          cat $KUBE_CONFIG_PATH_PREFIX/config2

          kind get kubeconfig --name "$CLUSTER_NAME_3" > $KUBE_CONFIG_PATH_PREFIX/config3
          echo "config 3:"
          cat $KUBE_CONFIG_PATH_PREFIX/config3

          echo KUBECONFIG1="$KUBE_CONFIG_PATH_PREFIX/config1" >> $GITHUB_ENV
          echo KUBECONFIG2="$KUBE_CONFIG_PATH_PREFIX/config2" >> $GITHUB_ENV
          echo KUBECONFIG3="$KUBE_CONFIG_PATH_PREFIX/config3" >> $GITHUB_ENV

          echo CLUSTER1_CIDR="172.18.1.128/25" >> $GITHUB_ENV
          echo CLUSTER2_CIDR="172.18.2.128/25" >> $GITHUB_ENV
          echo CLUSTER3_CIDR="172.18.3.128/25" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}/src/github.com/${{ github.repository }}
      - name: Interdomain tests
        run: |
          go test -count 1 -timeout 1h -race -v -tags=interdomain ./...
        env:
          ARTIFACTS_DIR: interdomain-logs
        working-directory: ${{ github.workspace }}/src/github.com/${{ github.repository }}
      - name: Upload artifacts
        if: ${{ success() || failure() || cancelled() }}
        uses: actions/upload-artifact@v2
        with:
          name: Containers logs
          path: ${{ github.workspace }}/src/github.com/${{ github.repository }}/interdomain-logs
